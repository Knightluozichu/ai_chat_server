让我以多角色的方式分析这个问题。

前端开发者视角：
我注意到前端的文件上传和处理流程是正确的。文件上传到 Supabase Storage 后，会创建文件记录并触发文档处理请求。错误处理和状态更新也都实现得很好。

后端开发者视角：
从日志中可以看到关键问题：


ERROR:app.services.document_service:处理文档块 1 失败: {'code': 'PGRST204', 'details': None, 'hint': None, 'message': "Could not find the 'user_id' column of 'document_chunks' in the schema cache"}
这表明 document_chunks 表缺少 user_id 字段，这是一个数据库结构问题。

数据库架构师视角：
检查当前的 document_chunks 表结构：


CREATE TABLE document_chunks (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  file_id uuid REFERENCES files ON DELETE CASCADE NOT NULL,
  content text NOT NULL,
  metadata jsonb DEFAULT '{}'::jsonb,
  embedding vector(1536),
  created_at timestamptz DEFAULT now()
);
确实缺少了 user_id 字段，这会影响文档处理服务的正常运行。

解决方案架构师视角：
建议采取以下步骤修复：

修改 document_chunks 表结构：

添加 user_id 字段
更新相关的 RLS 策略
确保新增字段与 files 表的权限控制保持一致
更新处理服务的错误处理：

添加更详细的错误日志
实现更优雅的错误恢复机制
具体修复建议：

创建新的数据库迁移文件，添加以下内容：

-- 添加 user_id 字段到 document_chunks 表
ALTER TABLE document_chunks 
ADD COLUMN user_id uuid REFERENCES auth.users NOT NULL;

-- 更新 RLS 策略
DROP POLICY IF EXISTS "Users can view chunks of their files" ON document_chunks;
CREATE POLICY "Users can view own document chunks"
  ON document_chunks
  FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

-- 更新插入策略
DROP POLICY IF EXISTS "Service role can insert document chunks" ON document_chunks;
CREATE POLICY "Service role can insert document chunks"
  ON document_chunks
  FOR INSERT
  TO service_role
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM files
      WHERE id = document_chunks.file_id
      AND user_id = document_chunks.user_id
    )
  );

-- 添加触发器自动填充 user_id
CREATE OR REPLACE FUNCTION set_document_chunk_user_id()
RETURNS TRIGGER AS $$
BEGIN
  NEW.user_id = (
    SELECT user_id 
    FROM files 
    WHERE id = NEW.file_id
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER document_chunks_set_user_id
  BEFORE INSERT ON document_chunks
  FOR EACH ROW
  EXECUTE FUNCTION set_document_chunk_user_id();
后端服务需要相应更新：
确保在创建文档块时包含 user_id 字段
添加更详细的错误处理和日志记录
建议的后端代码修改：


async def store_document_chunk(self, chunk_data: dict) -> dict:
    try:
        # 获取文件的 user_id
        file_response = await self.supabase.table('files')\
            .select('user_id')\
            .eq('id', chunk_data['file_id'])\
            .single()\
            .execute()
        
        if not file_response.data:
            raise ValueError(f"File not found: {chunk_data['file_id']}")
        
        # 添加 user_id 到 chunk 数据
        chunk_data['user_id'] = file_response.data['user_id']
        
        # 存储文档块
        response = await self.supabase.table('document_chunks')\
            .insert(chunk_data)\
            .execute()
            
        return response.data
    except Exception as e:
        logger.error(f"存储文档块失败: {str(e)}", exc_info=True)
        raise
部署建议：

先备份现有数据
应用数据库迁移
部署更新后的后端服务
验证文档处理功能
监控错误日志确保问题解决
需要我详细说明任何部分吗？


Report Issue

Undo

3.3M monthly tokens remaining.
Subscribe to Pro 50 for 2x more usage
Update

