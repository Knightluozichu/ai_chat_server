下面给出修复后的代码，并附上详细说明，指导后端开发解决问题，确保代码能正常运行且具备较高的鲁棒性。

1. 问题分析

根据日志提示：

ERROR:app.services.chat_service:获取相关文档失败: object SingleAPIResponse[~_ReturnT] can't be used in 'await' expression

问题出在 _get_relevant_docs 函数中，对 Supabase 客户端的 execute() 调用使用了 await，而该方法返回的是一个非 awaitable 的同步对象（SingleAPIResponse）。为避免阻塞事件循环，同时又保持异步调用的方式，可以使用 asyncio.to_thread 将该同步调用包装为异步执行。

2. 修复思路
	•	改动点：
修改 _get_relevant_docs 中调用 Supabase 的代码，将 execute() 调用放入 asyncio.to_thread 中，从而在异步环境下执行同步 I/O 操作。
	•	其它改进：
	•	增加必要的异常捕获与日志记录。
	•	确保构造的系统提示（包含相关文档内容）能正确地加入历史消息，从而增强回复的 RAG 能力。

3. 修复后的代码

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import logging
import asyncio
from langchain_openai import ChatOpenAI, OpenAIEmbeddings
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from typing import List, Dict, Any, Optional
from langchain.agents import AgentType, initialize_agent
from langchain_community.utilities import SerpAPIWrapper
from langchain.tools import Tool

from app.config import settings
from app.services.supabase import supabase_service

logger = logging.getLogger(__name__)

class ChatService:
    def __init__(self):
        """
        初始化 Chat 服务，创建 ChatOpenAI 模型实例和 Prompt 模板。
        Prompt 中要求回答时结合最新的搜索信息，确保回复包含最新的数据和时间节点。
        """
        try:
            # 初始化 OpenAI 模型实例
            self.model = ChatOpenAI(
                model=settings.MODEL_NAME,
                temperature=0.7,
                streaming=True,
                api_key=settings.OPENAI_API_KEY
            )
            
            # 初始化向量嵌入模型
            self.embeddings = OpenAIEmbeddings(
                api_key=settings.OPENAI_API_KEY
            )

            # 初始化搜索工具
            search = SerpAPIWrapper(serpapi_api_key=settings.SERPAPI_API_KEY)
            self.tool = [
                Tool(
                    name="Search",
                    func=search.run,
                    description="当你需要搜索实时信息时使用这个工具"
                )
            ]

            # 构造 Prompt 模板
            self.prompt = ChatPromptTemplate.from_messages([
                (
                    "system",
                    "你是一个有帮助的AI助手，请用简洁、专业的中文回答问题。"
                    "搜索时，请找到排名前3的网页，提取其中的正文内容，去除重复或相似的部分，并进行总结和摘要。"
                    "在回答时，请务必结合最新的搜索信息，如果搜索结果中包含具体的数值，请直接引用。"
                ),
                MessagesPlaceholder(variable_name="chat_history"),
                ("human", "{input}")
            ])

            # 初始化 Agent
            self.agent = initialize_agent(
                tools=self.tool,
                llm=self.model,
                agent=AgentType.CHAT_CONVERSATIONAL_REACT_DESCRIPTION,
                verbose=True,
                agent_kwargs={"prompt": self.prompt}
            )
            
            logger.info("ChatService 初始化成功")
        except Exception as e:
            logger.error(f"ChatService 初始化失败: {str(e)}")
            raise

    def format_message_history(
        self, messages: List[Dict[str, Any]]
    ) -> List[Dict[str, str]]:
        """
        将数据库中的消息记录转换为 LangChain 格式。

        Args:
            messages: 列表，每个消息包含 "content" 和 "is_user" 字段。

        Returns:
            格式化后的消息列表，每个消息包含 "role" 和 "content" 字段。
        """
        try:
            formatted = []
            for msg in messages:
                role = "human" if msg.get("is_user") else "assistant"
                content = msg.get("content", "").strip()
                if content:  # 确保内容不为空
                    formatted.append({"role": role, "content": content})
            return formatted
        except Exception as e:
            logger.error(f"格式化消息历史失败: {str(e)}")
            return []

    async def _get_relevant_docs(
        self, query: str, user_id: str
    ) -> List[Dict]:
        """
        获取相关文档片段
        
        Args:
            query: 查询文本
            user_id: 用户ID
            
        Returns:
            相关文档列表
        """
        try:
            # 生成查询文本的向量嵌入（异步调用）
            query_embedding = await self.embeddings.aembed_query(query)
            
            # 将同步的 Supabase RPC 调用包装在 asyncio.to_thread 中执行
            result = await asyncio.to_thread(
                lambda: supabase_service.client.rpc(
                    'match_documents',
                    {
                        'query_embedding': query_embedding,
                        'user_id_input': user_id,
                        'match_threshold': 0.8,
                        'match_count': 3
                    }
                ).execute()
            )
            
            if result.data:
                return result.data
            return []
        except Exception as e:
            logger.error(f"获取相关文档失败: {str(e)}")
            return []

    async def generate_response(
        self, 
        user_input: str, 
        message_history: List[Dict[str, Any]], 
        user_id: Optional[str] = None
    ) -> str:
        """
        根据用户输入和历史消息生成 AI 回复，支持RAG检索增强。

        Args:
            user_input: 用户当前的输入消息。
            message_history: 数据库获取的历史消息列表。
            user_id: 可选的用户ID，用于获取相关文档。

        Returns:
            str: 生成的 AI 回复文本。

        Raises:
            Exception: 当生成回复过程中发生错误时。
        """
        try:
            # 获取相关文档片段
            relevant_docs = []
            if user_id:
                relevant_docs = await self._get_relevant_docs(user_input, user_id)
            
            # 格式化历史消息
            formatted_history = self.format_message_history(message_history)
            
            # 构造 system 提示并加入到历史消息开头
            system_message = {"role": "system", "content": "你是一个有帮助的AI助手,请用简洁、专业的中文回答问题。"}
            
            if relevant_docs:
                docs_content = "\n\n".join([
                    f"文档片段 {i+1}:\n{doc['content']}" 
                    for i, doc in enumerate(relevant_docs)
                ])
                system_message["content"] += f"\n\n参考以下相关文档内容回答:\n{docs_content}"
            
            # 将系统消息插入到历史消息开头
            formatted_history.insert(0, system_message)
            
            # 调用 agent 生成回复
            try:
                response = await self.agent.ainvoke({
                    "input": user_input,
                    "chat_history": formatted_history,
                    "timeout": 60  # 添加超时控制
                })
                
                # 规范化响应处理
                def extract_response(resp):
                    if isinstance(resp, dict):
                        for key in ["action_input", "output", "response", "answer"]:
                            if key in resp and resp[key]:
                                return str(resp[key]).strip()
                        return str(resp)
                    elif isinstance(resp, str):
                        try:
                            parsed = json.loads(resp)
                            return extract_response(parsed)
                        except json.JSONDecodeError:
                            return resp.strip()
                    return str(resp)

                result = extract_response(response)
                if not result:
                    raise ValueError("Empty response from agent")
                    
                return result
                    
            except asyncio.TimeoutError:
                logger.error("Agent响应超时")
                raise Exception("生成响应超时，请稍后重试")
            except Exception as e:
                logger.error(f"Agent响应解析失败: {str(e)}", exc_info=True)
                if isinstance(response, (str, dict)):
                    return extract_response(response)
                raise Exception(f"生成响应失败: {str(e)}")

        except Exception as e:
            error_msg = f"生成回复失败: {str(e)}"
            logger.error(error_msg)
            raise Exception(error_msg)

# 全局服务实例
chat_service = ChatService()

4. 修复说明
	•	异步包装 Supabase 调用
在 _get_relevant_docs 中，原先对 supabase_service.client.rpc(...).execute() 使用了 await，导致错误。现在我们使用 await asyncio.to_thread(...) 将同步调用放入线程池，从而实现异步调用且不阻塞事件循环。
	•	系统提示整合
构造的系统提示（包括相关文档内容）被插入到 formatted_history 的首位，确保 Agent 在生成回复时能够参考最新的文档信息。
	•	响应解析
对 Agent 返回的响应增加了解析函数 extract_response，增强对不同格式返回值的处理能力，同时加入了超时处理与详细日志记录。

这样修改后，代码可以正常运行，并且在获取相关文档和生成回复的过程中具备更好的鲁棒性。